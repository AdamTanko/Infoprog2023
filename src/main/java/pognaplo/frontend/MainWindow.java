package pognaplo.frontend;

import pognaplo.kek.Controller;

import javax.swing.*;
import java.awt.*;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class MainWindow extends JFrame {

    private JPanel panel1;
    private JButton listButton;
    private JButton findButton;
    private JButton exitButton;
    private JButton addButton;
    private JButton deletButton;
    private JTable table1;
    private JPanel buttonPanel;

    public void setTablePanel(JScrollPane tablePanel) {
        this.tablePanel.setViewportView(tablePanel);
    }

    private JScrollPane tablePanel;


    /**
     * A fo ablak amivel a felhasznalo erintekzni fog.
     *
     * @param filepath - filepath a naplo.txt-hez
     */
    public MainWindow(String filepath) {
        // megnezni, hogy a filepath tartalmazza-e a naplo.txt-t, ha nem appendeli a filepath-hez
        // utana atadja a Controller-nek
        $$$setupUI$$$();
        if (filepath.endsWith("\\naplo.txt") || filepath.endsWith("/naplo.txt")) {
            Controller.setFilepath(filepath);
        } else {
            Controller.setFilepath(filepath + "\\naplo.txt");
        }
        setTitle(Controller.TITLE);
        setIconImage(Controller.ICON.getImage());
        setResizable(false);
        setSize(450, 300);
        setContentPane(panel1);

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        deletButton.addActionListener(e ->
        {
            Controller.deletExpiredItems(LocalDateTime.now());
            tablePanel.setViewportView(Controller.listItems());
            panel1.revalidate();
            panel1.repaint();
        });
        exitButton.addActionListener(e ->
        {
            if (Controller.naplo.size() == 0) {
                dispose();
                System.exit(0);
            } else {
                System.exit(Controller.writeToFile());
            }
        });
        listButton.addActionListener(e ->
        {
            tablePanel.setViewportView(Controller.listItems());
            panel1.revalidate();
            panel1.repaint();
        });
        findButton.addActionListener(e ->
        {
            FindDialog yes = new FindDialog();
            System.out.println(yes.getDateInput());
            Controller.findBasedOnDate(yes.getDateInput());
            yes.dispose();
//            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-uuuu");
//            try {
//                LocalDate dt = LocalDate.parse(JOptionPane.showInputDialog("Adja meg a kersendő dátumot (dd-mm-yyyy formátumban):"), formatter);
//                tablePanel.setViewportView(Controller.findBasedOnDate(dt));
//            } catch (DateTimeException ex) {
//                JOptionPane.showMessageDialog(null, "Rossz datum volt beadva", "Rossz Bemenet", JOptionPane.ERROR_MESSAGE);
//            } catch (NullPointerException ignored) {
//            }

        });
        addButton.addActionListener(e ->
        {
            new AddWindow();
        });
        pack();
        setLocationRelativeTo(null);
        setVisible(true);
    }

    public void updateTable(JTable jt) {
        this.tablePanel.setViewportView(jt);
    }


    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(6, 1, new Insets(0, 5, 0, 0), -1, -1));
        panel1.add(buttonPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(40, 199), null, 0, false));
        addButton = new JButton();
        addButton.setText("Add");
        addButton.setMnemonic('A');
        addButton.setDisplayedMnemonicIndex(0);
        buttonPanel.add(addButton, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        listButton = new JButton();
        listButton.setText("List");
        buttonPanel.add(listButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        findButton = new JButton();
        findButton.setText("Find");
        buttonPanel.add(findButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JSeparator separator1 = new JSeparator();
        buttonPanel.add(separator1, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        exitButton = new JButton();
        exitButton.setText("Exit");
        buttonPanel.add(exitButton, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        deletButton = new JButton();
        deletButton.setEnabled(true);
        deletButton.setText("Delet");
        buttonPanel.add(deletButton, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panel1.add(tablePanel, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        table1 = new JTable();
        table1.setAutoResizeMode(4);
        table1.setEnabled(true);
        table1.setFillsViewportHeight(false);
        tablePanel.setViewportView(table1);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }


    private void createUIComponents() {
        tablePanel = new JScrollPane();
    }
}